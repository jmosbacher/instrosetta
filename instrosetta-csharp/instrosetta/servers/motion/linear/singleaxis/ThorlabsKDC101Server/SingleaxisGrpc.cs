// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: singleaxis.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Devices.Motion.Linear.Singleaxis {
  public static partial class SingleLinearAxis
  {
    static readonly string __ServiceName = "devices.motion.linear.singleaxis.SingleLinearAxis";

    static readonly grpc::Marshaller<global::Devices.Motion.Linear.Singleaxis.TextMessage> __Marshaller_devices_motion_linear_singleaxis_TextMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Motion.Linear.Singleaxis.TextMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Motion.Linear.Singleaxis.ScanDevicesRequest> __Marshaller_devices_motion_linear_singleaxis_ScanDevicesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Motion.Linear.Singleaxis.ScanDevicesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Motion.Linear.Singleaxis.Device> __Marshaller_devices_motion_linear_singleaxis_Device = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Motion.Linear.Singleaxis.Device.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Motion.Linear.Singleaxis.ConnectRequest> __Marshaller_devices_motion_linear_singleaxis_ConnectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Motion.Linear.Singleaxis.ConnectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Motion.Linear.Singleaxis.DisconnectRequest> __Marshaller_devices_motion_linear_singleaxis_DisconnectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Motion.Linear.Singleaxis.DisconnectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Motion.Linear.Singleaxis.GetRangeRequest> __Marshaller_devices_motion_linear_singleaxis_GetRangeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Motion.Linear.Singleaxis.GetRangeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Motion.Linear.Singleaxis.StageRange> __Marshaller_devices_motion_linear_singleaxis_StageRange = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Motion.Linear.Singleaxis.StageRange.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Motion.Linear.Singleaxis.GetPositionRequest> __Marshaller_devices_motion_linear_singleaxis_GetPositionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Motion.Linear.Singleaxis.GetPositionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Motion.Linear.Singleaxis.Position> __Marshaller_devices_motion_linear_singleaxis_Position = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Motion.Linear.Singleaxis.Position.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Motion.Linear.Singleaxis.MoveAbsoluteRequest> __Marshaller_devices_motion_linear_singleaxis_MoveAbsoluteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Motion.Linear.Singleaxis.MoveAbsoluteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Motion.Linear.Singleaxis.MoveRelativeRequest> __Marshaller_devices_motion_linear_singleaxis_MoveRelativeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Motion.Linear.Singleaxis.MoveRelativeRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Devices.Motion.Linear.Singleaxis.TextMessage, global::Devices.Motion.Linear.Singleaxis.TextMessage> __Method_Echo = new grpc::Method<global::Devices.Motion.Linear.Singleaxis.TextMessage, global::Devices.Motion.Linear.Singleaxis.TextMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Echo",
        __Marshaller_devices_motion_linear_singleaxis_TextMessage,
        __Marshaller_devices_motion_linear_singleaxis_TextMessage);

    static readonly grpc::Method<global::Devices.Motion.Linear.Singleaxis.ScanDevicesRequest, global::Devices.Motion.Linear.Singleaxis.Device> __Method_ScanDevices = new grpc::Method<global::Devices.Motion.Linear.Singleaxis.ScanDevicesRequest, global::Devices.Motion.Linear.Singleaxis.Device>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ScanDevices",
        __Marshaller_devices_motion_linear_singleaxis_ScanDevicesRequest,
        __Marshaller_devices_motion_linear_singleaxis_Device);

    static readonly grpc::Method<global::Devices.Motion.Linear.Singleaxis.ConnectRequest, global::Devices.Motion.Linear.Singleaxis.Device> __Method_Connect = new grpc::Method<global::Devices.Motion.Linear.Singleaxis.ConnectRequest, global::Devices.Motion.Linear.Singleaxis.Device>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Connect",
        __Marshaller_devices_motion_linear_singleaxis_ConnectRequest,
        __Marshaller_devices_motion_linear_singleaxis_Device);

    static readonly grpc::Method<global::Devices.Motion.Linear.Singleaxis.DisconnectRequest, global::Devices.Motion.Linear.Singleaxis.Device> __Method_Disconnect = new grpc::Method<global::Devices.Motion.Linear.Singleaxis.DisconnectRequest, global::Devices.Motion.Linear.Singleaxis.Device>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Disconnect",
        __Marshaller_devices_motion_linear_singleaxis_DisconnectRequest,
        __Marshaller_devices_motion_linear_singleaxis_Device);

    static readonly grpc::Method<global::Devices.Motion.Linear.Singleaxis.GetRangeRequest, global::Devices.Motion.Linear.Singleaxis.StageRange> __Method_GetRange = new grpc::Method<global::Devices.Motion.Linear.Singleaxis.GetRangeRequest, global::Devices.Motion.Linear.Singleaxis.StageRange>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRange",
        __Marshaller_devices_motion_linear_singleaxis_GetRangeRequest,
        __Marshaller_devices_motion_linear_singleaxis_StageRange);

    static readonly grpc::Method<global::Devices.Motion.Linear.Singleaxis.GetPositionRequest, global::Devices.Motion.Linear.Singleaxis.Position> __Method_GetPosition = new grpc::Method<global::Devices.Motion.Linear.Singleaxis.GetPositionRequest, global::Devices.Motion.Linear.Singleaxis.Position>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPosition",
        __Marshaller_devices_motion_linear_singleaxis_GetPositionRequest,
        __Marshaller_devices_motion_linear_singleaxis_Position);

    static readonly grpc::Method<global::Devices.Motion.Linear.Singleaxis.MoveAbsoluteRequest, global::Devices.Motion.Linear.Singleaxis.Position> __Method_MoveAbsolute = new grpc::Method<global::Devices.Motion.Linear.Singleaxis.MoveAbsoluteRequest, global::Devices.Motion.Linear.Singleaxis.Position>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "MoveAbsolute",
        __Marshaller_devices_motion_linear_singleaxis_MoveAbsoluteRequest,
        __Marshaller_devices_motion_linear_singleaxis_Position);

    static readonly grpc::Method<global::Devices.Motion.Linear.Singleaxis.MoveRelativeRequest, global::Devices.Motion.Linear.Singleaxis.Position> __Method_MoveRelative = new grpc::Method<global::Devices.Motion.Linear.Singleaxis.MoveRelativeRequest, global::Devices.Motion.Linear.Singleaxis.Position>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "MoveRelative",
        __Marshaller_devices_motion_linear_singleaxis_MoveRelativeRequest,
        __Marshaller_devices_motion_linear_singleaxis_Position);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Devices.Motion.Linear.Singleaxis.SingleaxisReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SingleLinearAxis</summary>
    public abstract partial class SingleLinearAxisBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Devices.Motion.Linear.Singleaxis.TextMessage> Echo(global::Devices.Motion.Linear.Singleaxis.TextMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ScanDevices(global::Devices.Motion.Linear.Singleaxis.ScanDevicesRequest request, grpc::IServerStreamWriter<global::Devices.Motion.Linear.Singleaxis.Device> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Devices.Motion.Linear.Singleaxis.Device> Connect(global::Devices.Motion.Linear.Singleaxis.ConnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Devices.Motion.Linear.Singleaxis.Device> Disconnect(global::Devices.Motion.Linear.Singleaxis.DisconnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Devices.Motion.Linear.Singleaxis.StageRange> GetRange(global::Devices.Motion.Linear.Singleaxis.GetRangeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Devices.Motion.Linear.Singleaxis.Position> GetPosition(global::Devices.Motion.Linear.Singleaxis.GetPositionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task MoveAbsolute(global::Devices.Motion.Linear.Singleaxis.MoveAbsoluteRequest request, grpc::IServerStreamWriter<global::Devices.Motion.Linear.Singleaxis.Position> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task MoveRelative(global::Devices.Motion.Linear.Singleaxis.MoveRelativeRequest request, grpc::IServerStreamWriter<global::Devices.Motion.Linear.Singleaxis.Position> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SingleLinearAxis</summary>
    public partial class SingleLinearAxisClient : grpc::ClientBase<SingleLinearAxisClient>
    {
      /// <summary>Creates a new client for SingleLinearAxis</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SingleLinearAxisClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SingleLinearAxis that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SingleLinearAxisClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SingleLinearAxisClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SingleLinearAxisClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Devices.Motion.Linear.Singleaxis.TextMessage Echo(global::Devices.Motion.Linear.Singleaxis.TextMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Echo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Devices.Motion.Linear.Singleaxis.TextMessage Echo(global::Devices.Motion.Linear.Singleaxis.TextMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Echo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Motion.Linear.Singleaxis.TextMessage> EchoAsync(global::Devices.Motion.Linear.Singleaxis.TextMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EchoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Motion.Linear.Singleaxis.TextMessage> EchoAsync(global::Devices.Motion.Linear.Singleaxis.TextMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Echo, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Devices.Motion.Linear.Singleaxis.Device> ScanDevices(global::Devices.Motion.Linear.Singleaxis.ScanDevicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanDevices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Devices.Motion.Linear.Singleaxis.Device> ScanDevices(global::Devices.Motion.Linear.Singleaxis.ScanDevicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ScanDevices, null, options, request);
      }
      public virtual global::Devices.Motion.Linear.Singleaxis.Device Connect(global::Devices.Motion.Linear.Singleaxis.ConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Connect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Devices.Motion.Linear.Singleaxis.Device Connect(global::Devices.Motion.Linear.Singleaxis.ConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Connect, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Motion.Linear.Singleaxis.Device> ConnectAsync(global::Devices.Motion.Linear.Singleaxis.ConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Motion.Linear.Singleaxis.Device> ConnectAsync(global::Devices.Motion.Linear.Singleaxis.ConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Connect, null, options, request);
      }
      public virtual global::Devices.Motion.Linear.Singleaxis.Device Disconnect(global::Devices.Motion.Linear.Singleaxis.DisconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Disconnect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Devices.Motion.Linear.Singleaxis.Device Disconnect(global::Devices.Motion.Linear.Singleaxis.DisconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Disconnect, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Motion.Linear.Singleaxis.Device> DisconnectAsync(global::Devices.Motion.Linear.Singleaxis.DisconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisconnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Motion.Linear.Singleaxis.Device> DisconnectAsync(global::Devices.Motion.Linear.Singleaxis.DisconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Disconnect, null, options, request);
      }
      public virtual global::Devices.Motion.Linear.Singleaxis.StageRange GetRange(global::Devices.Motion.Linear.Singleaxis.GetRangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Devices.Motion.Linear.Singleaxis.StageRange GetRange(global::Devices.Motion.Linear.Singleaxis.GetRangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRange, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Motion.Linear.Singleaxis.StageRange> GetRangeAsync(global::Devices.Motion.Linear.Singleaxis.GetRangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Motion.Linear.Singleaxis.StageRange> GetRangeAsync(global::Devices.Motion.Linear.Singleaxis.GetRangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRange, null, options, request);
      }
      public virtual global::Devices.Motion.Linear.Singleaxis.Position GetPosition(global::Devices.Motion.Linear.Singleaxis.GetPositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPosition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Devices.Motion.Linear.Singleaxis.Position GetPosition(global::Devices.Motion.Linear.Singleaxis.GetPositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPosition, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Motion.Linear.Singleaxis.Position> GetPositionAsync(global::Devices.Motion.Linear.Singleaxis.GetPositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPositionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Motion.Linear.Singleaxis.Position> GetPositionAsync(global::Devices.Motion.Linear.Singleaxis.GetPositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPosition, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Devices.Motion.Linear.Singleaxis.Position> MoveAbsolute(global::Devices.Motion.Linear.Singleaxis.MoveAbsoluteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveAbsolute(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Devices.Motion.Linear.Singleaxis.Position> MoveAbsolute(global::Devices.Motion.Linear.Singleaxis.MoveAbsoluteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_MoveAbsolute, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Devices.Motion.Linear.Singleaxis.Position> MoveRelative(global::Devices.Motion.Linear.Singleaxis.MoveRelativeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveRelative(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Devices.Motion.Linear.Singleaxis.Position> MoveRelative(global::Devices.Motion.Linear.Singleaxis.MoveRelativeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_MoveRelative, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SingleLinearAxisClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SingleLinearAxisClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SingleLinearAxisBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Echo, serviceImpl.Echo)
          .AddMethod(__Method_ScanDevices, serviceImpl.ScanDevices)
          .AddMethod(__Method_Connect, serviceImpl.Connect)
          .AddMethod(__Method_Disconnect, serviceImpl.Disconnect)
          .AddMethod(__Method_GetRange, serviceImpl.GetRange)
          .AddMethod(__Method_GetPosition, serviceImpl.GetPosition)
          .AddMethod(__Method_MoveAbsolute, serviceImpl.MoveAbsolute)
          .AddMethod(__Method_MoveRelative, serviceImpl.MoveRelative).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SingleLinearAxisBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Echo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Devices.Motion.Linear.Singleaxis.TextMessage, global::Devices.Motion.Linear.Singleaxis.TextMessage>(serviceImpl.Echo));
      serviceBinder.AddMethod(__Method_ScanDevices, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Devices.Motion.Linear.Singleaxis.ScanDevicesRequest, global::Devices.Motion.Linear.Singleaxis.Device>(serviceImpl.ScanDevices));
      serviceBinder.AddMethod(__Method_Connect, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Devices.Motion.Linear.Singleaxis.ConnectRequest, global::Devices.Motion.Linear.Singleaxis.Device>(serviceImpl.Connect));
      serviceBinder.AddMethod(__Method_Disconnect, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Devices.Motion.Linear.Singleaxis.DisconnectRequest, global::Devices.Motion.Linear.Singleaxis.Device>(serviceImpl.Disconnect));
      serviceBinder.AddMethod(__Method_GetRange, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Devices.Motion.Linear.Singleaxis.GetRangeRequest, global::Devices.Motion.Linear.Singleaxis.StageRange>(serviceImpl.GetRange));
      serviceBinder.AddMethod(__Method_GetPosition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Devices.Motion.Linear.Singleaxis.GetPositionRequest, global::Devices.Motion.Linear.Singleaxis.Position>(serviceImpl.GetPosition));
      serviceBinder.AddMethod(__Method_MoveAbsolute, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Devices.Motion.Linear.Singleaxis.MoveAbsoluteRequest, global::Devices.Motion.Linear.Singleaxis.Position>(serviceImpl.MoveAbsolute));
      serviceBinder.AddMethod(__Method_MoveRelative, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Devices.Motion.Linear.Singleaxis.MoveRelativeRequest, global::Devices.Motion.Linear.Singleaxis.Position>(serviceImpl.MoveRelative));
    }

  }
}
#endregion
