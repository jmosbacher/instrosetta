// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: instrosetta/interfaces/optics/monochromator.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Devices.Optics.Monochromator {
  public static partial class Monochromator
  {
    static readonly string __ServiceName = "devices.optics.monochromator.Monochromator";

    static readonly grpc::Marshaller<global::Devices.Optics.Monochromator.ConnectRequest> __Marshaller_devices_optics_monochromator_ConnectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Optics.Monochromator.ConnectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Optics.Monochromator.ConnectResponse> __Marshaller_devices_optics_monochromator_ConnectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Optics.Monochromator.ConnectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Optics.Monochromator.GetWavelengthRangeRequest> __Marshaller_devices_optics_monochromator_GetWavelengthRangeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Optics.Monochromator.GetWavelengthRangeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Optics.Monochromator.GetWavelengthRangeResponse> __Marshaller_devices_optics_monochromator_GetWavelengthRangeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Optics.Monochromator.GetWavelengthRangeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Optics.Monochromator.GetWavelengthRequest> __Marshaller_devices_optics_monochromator_GetWavelengthRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Optics.Monochromator.GetWavelengthRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Optics.Monochromator.GetWavelengthResponse> __Marshaller_devices_optics_monochromator_GetWavelengthResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Optics.Monochromator.GetWavelengthResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Optics.Monochromator.SetWavelengthRequest> __Marshaller_devices_optics_monochromator_SetWavelengthRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Optics.Monochromator.SetWavelengthRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Optics.Monochromator.SetWavelengthResponse> __Marshaller_devices_optics_monochromator_SetWavelengthResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Optics.Monochromator.SetWavelengthResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Optics.Monochromator.GetGratingOptionsRequest> __Marshaller_devices_optics_monochromator_GetGratingOptionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Optics.Monochromator.GetGratingOptionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Optics.Monochromator.GetGratingOptionsResponse> __Marshaller_devices_optics_monochromator_GetGratingOptionsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Optics.Monochromator.GetGratingOptionsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Optics.Monochromator.GetGratingRequest> __Marshaller_devices_optics_monochromator_GetGratingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Optics.Monochromator.GetGratingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Optics.Monochromator.GetGratingResponse> __Marshaller_devices_optics_monochromator_GetGratingResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Optics.Monochromator.GetGratingResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Optics.Monochromator.SetGratingRequest> __Marshaller_devices_optics_monochromator_SetGratingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Optics.Monochromator.SetGratingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Devices.Optics.Monochromator.SetGratingResponse> __Marshaller_devices_optics_monochromator_SetGratingResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Devices.Optics.Monochromator.SetGratingResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Devices.Optics.Monochromator.ConnectRequest, global::Devices.Optics.Monochromator.ConnectResponse> __Method_Connect = new grpc::Method<global::Devices.Optics.Monochromator.ConnectRequest, global::Devices.Optics.Monochromator.ConnectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Connect",
        __Marshaller_devices_optics_monochromator_ConnectRequest,
        __Marshaller_devices_optics_monochromator_ConnectResponse);

    static readonly grpc::Method<global::Devices.Optics.Monochromator.GetWavelengthRangeRequest, global::Devices.Optics.Monochromator.GetWavelengthRangeResponse> __Method_GetWavelengthRange = new grpc::Method<global::Devices.Optics.Monochromator.GetWavelengthRangeRequest, global::Devices.Optics.Monochromator.GetWavelengthRangeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWavelengthRange",
        __Marshaller_devices_optics_monochromator_GetWavelengthRangeRequest,
        __Marshaller_devices_optics_monochromator_GetWavelengthRangeResponse);

    static readonly grpc::Method<global::Devices.Optics.Monochromator.GetWavelengthRequest, global::Devices.Optics.Monochromator.GetWavelengthResponse> __Method_GetWavelength = new grpc::Method<global::Devices.Optics.Monochromator.GetWavelengthRequest, global::Devices.Optics.Monochromator.GetWavelengthResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWavelength",
        __Marshaller_devices_optics_monochromator_GetWavelengthRequest,
        __Marshaller_devices_optics_monochromator_GetWavelengthResponse);

    static readonly grpc::Method<global::Devices.Optics.Monochromator.SetWavelengthRequest, global::Devices.Optics.Monochromator.SetWavelengthResponse> __Method_SetWavelength = new grpc::Method<global::Devices.Optics.Monochromator.SetWavelengthRequest, global::Devices.Optics.Monochromator.SetWavelengthResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetWavelength",
        __Marshaller_devices_optics_monochromator_SetWavelengthRequest,
        __Marshaller_devices_optics_monochromator_SetWavelengthResponse);

    static readonly grpc::Method<global::Devices.Optics.Monochromator.GetGratingOptionsRequest, global::Devices.Optics.Monochromator.GetGratingOptionsResponse> __Method_GetGratingRange = new grpc::Method<global::Devices.Optics.Monochromator.GetGratingOptionsRequest, global::Devices.Optics.Monochromator.GetGratingOptionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGratingRange",
        __Marshaller_devices_optics_monochromator_GetGratingOptionsRequest,
        __Marshaller_devices_optics_monochromator_GetGratingOptionsResponse);

    static readonly grpc::Method<global::Devices.Optics.Monochromator.GetGratingRequest, global::Devices.Optics.Monochromator.GetGratingResponse> __Method_GetGrating = new grpc::Method<global::Devices.Optics.Monochromator.GetGratingRequest, global::Devices.Optics.Monochromator.GetGratingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGrating",
        __Marshaller_devices_optics_monochromator_GetGratingRequest,
        __Marshaller_devices_optics_monochromator_GetGratingResponse);

    static readonly grpc::Method<global::Devices.Optics.Monochromator.SetGratingRequest, global::Devices.Optics.Monochromator.SetGratingResponse> __Method_SetGrating = new grpc::Method<global::Devices.Optics.Monochromator.SetGratingRequest, global::Devices.Optics.Monochromator.SetGratingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetGrating",
        __Marshaller_devices_optics_monochromator_SetGratingRequest,
        __Marshaller_devices_optics_monochromator_SetGratingResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Devices.Optics.Monochromator.MonochromatorReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Monochromator</summary>
    public abstract partial class MonochromatorBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Devices.Optics.Monochromator.ConnectResponse> Connect(global::Devices.Optics.Monochromator.ConnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Devices.Optics.Monochromator.GetWavelengthRangeResponse> GetWavelengthRange(global::Devices.Optics.Monochromator.GetWavelengthRangeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Devices.Optics.Monochromator.GetWavelengthResponse> GetWavelength(global::Devices.Optics.Monochromator.GetWavelengthRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Devices.Optics.Monochromator.SetWavelengthResponse> SetWavelength(global::Devices.Optics.Monochromator.SetWavelengthRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Devices.Optics.Monochromator.GetGratingOptionsResponse> GetGratingRange(global::Devices.Optics.Monochromator.GetGratingOptionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Devices.Optics.Monochromator.GetGratingResponse> GetGrating(global::Devices.Optics.Monochromator.GetGratingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Devices.Optics.Monochromator.SetGratingResponse> SetGrating(global::Devices.Optics.Monochromator.SetGratingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Monochromator</summary>
    public partial class MonochromatorClient : grpc::ClientBase<MonochromatorClient>
    {
      /// <summary>Creates a new client for Monochromator</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MonochromatorClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Monochromator that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MonochromatorClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MonochromatorClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MonochromatorClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Devices.Optics.Monochromator.ConnectResponse Connect(global::Devices.Optics.Monochromator.ConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Connect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Devices.Optics.Monochromator.ConnectResponse Connect(global::Devices.Optics.Monochromator.ConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Connect, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Optics.Monochromator.ConnectResponse> ConnectAsync(global::Devices.Optics.Monochromator.ConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Optics.Monochromator.ConnectResponse> ConnectAsync(global::Devices.Optics.Monochromator.ConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Connect, null, options, request);
      }
      public virtual global::Devices.Optics.Monochromator.GetWavelengthRangeResponse GetWavelengthRange(global::Devices.Optics.Monochromator.GetWavelengthRangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWavelengthRange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Devices.Optics.Monochromator.GetWavelengthRangeResponse GetWavelengthRange(global::Devices.Optics.Monochromator.GetWavelengthRangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWavelengthRange, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Optics.Monochromator.GetWavelengthRangeResponse> GetWavelengthRangeAsync(global::Devices.Optics.Monochromator.GetWavelengthRangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWavelengthRangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Optics.Monochromator.GetWavelengthRangeResponse> GetWavelengthRangeAsync(global::Devices.Optics.Monochromator.GetWavelengthRangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWavelengthRange, null, options, request);
      }
      public virtual global::Devices.Optics.Monochromator.GetWavelengthResponse GetWavelength(global::Devices.Optics.Monochromator.GetWavelengthRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWavelength(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Devices.Optics.Monochromator.GetWavelengthResponse GetWavelength(global::Devices.Optics.Monochromator.GetWavelengthRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWavelength, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Optics.Monochromator.GetWavelengthResponse> GetWavelengthAsync(global::Devices.Optics.Monochromator.GetWavelengthRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWavelengthAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Optics.Monochromator.GetWavelengthResponse> GetWavelengthAsync(global::Devices.Optics.Monochromator.GetWavelengthRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWavelength, null, options, request);
      }
      public virtual global::Devices.Optics.Monochromator.SetWavelengthResponse SetWavelength(global::Devices.Optics.Monochromator.SetWavelengthRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetWavelength(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Devices.Optics.Monochromator.SetWavelengthResponse SetWavelength(global::Devices.Optics.Monochromator.SetWavelengthRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetWavelength, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Optics.Monochromator.SetWavelengthResponse> SetWavelengthAsync(global::Devices.Optics.Monochromator.SetWavelengthRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetWavelengthAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Optics.Monochromator.SetWavelengthResponse> SetWavelengthAsync(global::Devices.Optics.Monochromator.SetWavelengthRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetWavelength, null, options, request);
      }
      public virtual global::Devices.Optics.Monochromator.GetGratingOptionsResponse GetGratingRange(global::Devices.Optics.Monochromator.GetGratingOptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGratingRange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Devices.Optics.Monochromator.GetGratingOptionsResponse GetGratingRange(global::Devices.Optics.Monochromator.GetGratingOptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGratingRange, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Optics.Monochromator.GetGratingOptionsResponse> GetGratingRangeAsync(global::Devices.Optics.Monochromator.GetGratingOptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGratingRangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Optics.Monochromator.GetGratingOptionsResponse> GetGratingRangeAsync(global::Devices.Optics.Monochromator.GetGratingOptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGratingRange, null, options, request);
      }
      public virtual global::Devices.Optics.Monochromator.GetGratingResponse GetGrating(global::Devices.Optics.Monochromator.GetGratingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGrating(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Devices.Optics.Monochromator.GetGratingResponse GetGrating(global::Devices.Optics.Monochromator.GetGratingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGrating, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Optics.Monochromator.GetGratingResponse> GetGratingAsync(global::Devices.Optics.Monochromator.GetGratingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGratingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Optics.Monochromator.GetGratingResponse> GetGratingAsync(global::Devices.Optics.Monochromator.GetGratingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGrating, null, options, request);
      }
      public virtual global::Devices.Optics.Monochromator.SetGratingResponse SetGrating(global::Devices.Optics.Monochromator.SetGratingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetGrating(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Devices.Optics.Monochromator.SetGratingResponse SetGrating(global::Devices.Optics.Monochromator.SetGratingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetGrating, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Optics.Monochromator.SetGratingResponse> SetGratingAsync(global::Devices.Optics.Monochromator.SetGratingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetGratingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Devices.Optics.Monochromator.SetGratingResponse> SetGratingAsync(global::Devices.Optics.Monochromator.SetGratingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetGrating, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MonochromatorClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MonochromatorClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MonochromatorBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Connect, serviceImpl.Connect)
          .AddMethod(__Method_GetWavelengthRange, serviceImpl.GetWavelengthRange)
          .AddMethod(__Method_GetWavelength, serviceImpl.GetWavelength)
          .AddMethod(__Method_SetWavelength, serviceImpl.SetWavelength)
          .AddMethod(__Method_GetGratingRange, serviceImpl.GetGratingRange)
          .AddMethod(__Method_GetGrating, serviceImpl.GetGrating)
          .AddMethod(__Method_SetGrating, serviceImpl.SetGrating).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MonochromatorBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Connect, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Devices.Optics.Monochromator.ConnectRequest, global::Devices.Optics.Monochromator.ConnectResponse>(serviceImpl.Connect));
      serviceBinder.AddMethod(__Method_GetWavelengthRange, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Devices.Optics.Monochromator.GetWavelengthRangeRequest, global::Devices.Optics.Monochromator.GetWavelengthRangeResponse>(serviceImpl.GetWavelengthRange));
      serviceBinder.AddMethod(__Method_GetWavelength, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Devices.Optics.Monochromator.GetWavelengthRequest, global::Devices.Optics.Monochromator.GetWavelengthResponse>(serviceImpl.GetWavelength));
      serviceBinder.AddMethod(__Method_SetWavelength, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Devices.Optics.Monochromator.SetWavelengthRequest, global::Devices.Optics.Monochromator.SetWavelengthResponse>(serviceImpl.SetWavelength));
      serviceBinder.AddMethod(__Method_GetGratingRange, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Devices.Optics.Monochromator.GetGratingOptionsRequest, global::Devices.Optics.Monochromator.GetGratingOptionsResponse>(serviceImpl.GetGratingRange));
      serviceBinder.AddMethod(__Method_GetGrating, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Devices.Optics.Monochromator.GetGratingRequest, global::Devices.Optics.Monochromator.GetGratingResponse>(serviceImpl.GetGrating));
      serviceBinder.AddMethod(__Method_SetGrating, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Devices.Optics.Monochromator.SetGratingRequest, global::Devices.Optics.Monochromator.SetGratingResponse>(serviceImpl.SetGrating));
    }

  }
}
#endregion
